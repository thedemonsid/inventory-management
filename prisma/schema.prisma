// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Buyer {
  id        String     @id @default(cuid())
  name      String     @db.VarChar(100)
  phone     String?    @db.VarChar(20)
  email     String?    @unique
  address   String?    @db.VarChar(200)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  purchases Purchase[] // Relation to purchases

  @@index([name])
  @@index([id])
  @@map("buyers")
}

model Part {
  id            String     @id @default(cuid())
  code          String?    @unique
  name          String     @db.VarChar(100)
  quantity      Int        @default(0)
  purchasePrice Decimal    @db.Decimal(8, 2)
  mrp           Decimal    @db.Decimal(8, 2)
  sellingPrice  Decimal    @db.Decimal(8, 2)
  category      Category
  rackNumber    String     @db.VarChar(50)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  vectorEmbed   Float[]
  purchases     Purchase[] // Relation to purchases

  @@index([code])
  @@index([category])
  @@index([rackNumber])
  @@map("parts")
}

model Purchase {
  id          String   @id @default(cuid())
  buyer       Buyer    @relation(fields: [buyerId], references: [id])
  buyerId     String
  part        Part     @relation(fields: [partId], references: [id])
  partId      String
  quantity    Int
  unitPrice   Decimal  @db.Decimal(8, 2)
  totalAmount Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([buyerId])
  @@index([partId])
  @@map("purchases")
}

enum Category {
  ACCESSORIES
  SPARE_PARTS
  FIBER
}